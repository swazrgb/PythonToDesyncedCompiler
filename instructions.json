{
  "count_slots":{
    "name":"Count Slots",
    "args":[["out","Result","Number of slots of this type"],["in","Unit","The unit to check for (if not self)","entity",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Returns the number of slots in this unit of the given type"
  },
  "last":{
    "name":"Break",
    "category":"Flow",
    "exec_arg":false,
    "icon":"Main/skin/Icons/Common/56x56/Deny.png",
    "desc":"Break out of a loop"
  },
  "make_miner":{
    "name":"Make Miners",
    "args":[["in","Resource/Count","Resource type and number of miners to maintain","item_num"],["exec","If Working","Where to continue if the unit started working"]],
    "key":"autobase",
    "category":"AutoBase",
    "icon":"icon_input",
    "desc":"Construct and equip miner components on available carrier bots"
  },
  "is_fixed":{
    "name":"Is Fixed",
    "args":[["in","Slot index","Individual slot to check","num"],["exec","Is Fixed","Where to continue if inventory slot is fixed"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Free Space.png",
    "desc":"Check if a specific item slot index is fixed"
  },
  "compare_item":{
    "name":"Compare Item",
    "args":[["exec","If Different","Where to continue if the types differ"],["in","Value 1"],["in","Value 2"]],
    "category":"Flow",
    "exec_arg":[1,"If Equal","Where to continue if the types are the same"],
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Compares Item or Unit type"
  },
  "get_closest_entity":{
    "name":"Get Closest Entity",
    "args":[["in","Filter","Filter to check","radar"],["in","Filter","Second Filter","radar",true],["in","Filter","Third Filter","radar",true],["out","Output","Entity"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Closest Enemy.png",
    "desc":"Gets the closest visible entity matching a filter"
  },
  "is_daynight":{
    "name":"Is Day/Night",
    "args":[["exec","Day","Where to continue if it is nighttime"],["exec","Night","Where to continue if it is daytime"]],
    "category":"Global",
    "exec_arg":false,
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Divert program depending time of day"
  },
  "clear_research":{
    "name":"Clear Research",
    "args":[["in","Tech","Tech to remove from research queue"]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Clears a research from queue, or entire queue if no tech passed"
  },
  "move_north":{
    "name":"Move North",
    "args":[["in","Number","Number of tiles to move North","num"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Moves towards a tile North of the current location at the specified distance"
  },
  "readkey":{
    "name":"Read Key",
    "args":[["in","Frame","Structure to read the key for","entity"],["out","Key","Number key of structure"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Read Key.png",
    "desc":"Attempts to reads the internal key of the unit"
  },
  "faction_item_amount":{
    "name":"Faction Item Amount",
    "args":[["in","Item","Item to count","item"],["out","Result","Number of this item in your faction"],["exec","None","Execution path when none of this item exists in your faction"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Counts the number of the passed item in your logistics network"
  },
  "get_first_locked_0":{
    "name":"Get First Locked Id",
    "args":[["out","Item","The first locked item id with no item"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Gets the first item where the locked slot exists but there is no item in it"
  },
  "for_research":{
    "name":"Loop Research",
    "category":"Flow",
    "args":[["out","Tech","Researchable Tech"],["exec","Done","Finished looping through all researchable tech"]],
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Performs code for all researchable tech"
  },
  "dopickup":{
    "name":"Pick Up Items",
    "args":[["in","Source","Unit to take items from","entity"],["in","Item / Amount","Item and amount to pick up","item_num",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Pick Up Items.png",
    "desc":"Picks up a specific number of items from an entity\n\nWill try to pick up the specified amount, if no amount\nis specified it will try to pick up everything."
  },
  "modulo":{
    "name":"Modulo",
    "args":[["in","Num",null,"coord_num"],["in","By",null,"coord_num"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Mul Numbers.png",
    "desc":"Get the remainder of a division"
  },
  "unequip_component":{
    "name":"Unequip Component",
    "args":[["exec","No Component","If you don't current hold the requested component or slot was empty"],["in","Component","Component to unequip","comp"],["in","Slot index","Individual slot to try to unequip component from","num",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Common/56x56/Detach.png",
    "desc":"Unequips a component if it exists"
  },
  "request_item":{
    "name":"Request Item",
    "args":[["in","Item","Item and amount to order","item_num"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Requests an item if it doesn't exist in the inventory"
  },
  "combine_coordinate":{
    "name":"Combine Coordinate",
    "args":[["in","x",null,"any"],["in","y",null,"any"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Returns a coordinate made from x and y values"
  },
  "gethome":{
    "name":"Get Home",
    "args":[["out","Result","Factions home unit"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Common/56x56/Question.png",
    "desc":"Gets the factions home unit"
  },
  "get_entity_at":{
    "name":"Get Entity At",
    "args":[["in","Coordinate","Coordinate to get Entity from","coord_num"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Common/56x56/Power.png",
    "desc":"Gets the best matching entity at a coordinate"
  },
  "get_battery":{
    "name":"Get Battery",
    "args":[["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Check Battery.png",
    "desc":"Gets the value of the Battery level as a percent"
  },
  "gettrust":{
    "name":"Get Trust",
    "args":[["exec","Ally","Target unit considers you an ally"],["exec","Neutral","Target unit considers you neutral"],["exec","Enemy","Target unit considers you an enemy"],["in","Unit","Target Unit","entity"]],
    "category":"Global",
    "exec_arg":[1,"No Unit","No Unit Passed"],
    "icon":"Main/skin/Icons/Common/56x56/Question.png",
    "desc":"Gets the trust level of the unit towards you"
  },
  "domove":{
    "name":"Move Unit",
    "args":[["in","Target","Unit to move to, the number specifies the range in which to be in","entity"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Moves to another unit or within a range of another unit"
  },
  "can_produce":{
    "name":"Can Produce",
    "args":[["exec","Can Produce","Where to continue if the item can be produced"],["in","Item","Production Item","item"]],
    "category":"Global",
    "exec_arg":[1,"Cannot Produce","Where to continue if the item cannot be produced"],
    "icon":"Main/skin/Icons/Special/Commands/Can Produce.png",
    "desc":"Returns if a unit can produce an item"
  },
  "match":{
    "name":"Match",
    "args":[["in","Unit","Unit to Filter, defaults to Self","entity"],["in","Filter","Filter to check","radar"],["in","Filter","Second Filter","radar",true],["in","Filter","Third Filter","radar",true],["exec","Failed","Did not match filter"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Filters the passed entity"
  },
  "separate_register":{
    "name":"Separate Register",
    "args":[["in","Register",null,"entity"],["out","Num"],["out","Entity",null,null,true],["out","ID",null,null,true],["out","x",null,null,true],["out","y",null,null,true]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Split a register into separate parameters"
  },
  "set_research":{
    "name":"Set Research",
    "args":[["in","Tech","First active research","tech"]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Returns the first active research tech"
  },
  "get_inventory_item":{
    "name":"First Item",
    "args":[["out","Item"],["exec","No Items","No items in inventory"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Reads the first item in your inventory"
  },
  "unlock":{
    "desc":"Run as many instructions as possible. Use wait instructions to throttle execution.",
    "icon":"Main/skin/Icons/Common/56x56/Unlocked.png",
    "name":"Unlock",
    "category":"Flow"
  },
  "request_wait":{
    "name":"Request Wait",
    "args":[["in","Item","Item and amount to order","item_num"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Requests an item and waits until it exists in inventory"
  },
  "move_west":{
    "name":"Move West",
    "args":[["in","Number","Number of tiles to move West","num"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Moves towards a tile West of the current location at the specified distance"
  },
  "for_signal":{
    "name":"*Loop Signal*",
    "category":"Flow",
    "args":[["in","Signal","Signal"],["out","Entity","Entity with signal"],["exec","Done","Finished looping through all entities with signal"]],
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"*DEPRECATED* Use Loop Signal (Match) instead"
  },
  "check_health":{
    "name":"Check Health",
    "args":[["exec","Full","Where to continue if at full health"],["in","Unit","The unit to check for (if not self)","entity",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Common/56x56/H Value.png",
    "desc":"Check a units health"
  },
  "notify":{
    "name":"Notify",
    "args":[["in","Notify Value","Notification Value"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Notify.png",
    "desc":"Triggers a faction notification"
  },
  "move_east":{
    "name":"Move East",
    "args":[["in","Number","Number of tiles to move East","num"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Moves towards a tile East of the current location at the specified distance"
  },
  "exit":{
    "name":"Exit",
    "category":"Flow",
    "exec_arg":false,
    "icon":"Main/skin/Icons/Common/56x56/Deny.png",
    "desc":"Stops execution of the behavior"
  },
  "for_signal_match":{
    "name":"Loop Signal (Match)",
    "category":"Flow",
    "args":[["in","Signal","Signal"],["out","Entity","Entity with signal"],["out","Signal","Found signal","entity",true],["exec","Done","Finished looping through all entities with signal"]],
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Loops through all units with a signal of similar type"
  },
  "have_item":{
    "name":"Have Item",
    "args":[["in","Item","Item to count","item_num"],["exec","Have Item","have the specified item"],["in","Unit","The unit to check for (if not self)","entity",true]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Checks if you have at least a specified amount of an item"
  },
  "get_research":{
    "name":"Get Research",
    "args":[["out","Tech","First active research"]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Returns the first active research tech"
  },
  "check_number":{
    "name":"Compare Number",
    "args":[["exec","If Larger","Where to continue if Value is larger than Compare"],["exec","If Smaller","Where to continue if Value is smaller than Compare"],["in","Value","The value to check with","num"],["in","Compare","The number to check against","num"]],
    "category":"Math",
    "exec_arg":[1,"If Equal","Where to continue if the numerical values are the same"],
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Divert program depending on number of Value and Compare"
  },
  "count_item":{
    "name":"Count Items",
    "args":[["in","Item","Item to count","item"],["out","Result","Number of this item in inventory or empty if none exist"],["in","Unit","The unit to check for (if not self)","entity",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Counts the number of the passed item in its inventory"
  },
  "get_self":{
    "name":"Get Self",
    "args":[["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Set Register.png",
    "desc":"Gets the value of the Unit executing the behavior"
  },
  "set_comp_reg":{
    "name":"Set to Component",
    "args":[["in","Value",null,"any"],["in","Component/Index","Component and register number to set","comp_num"],["in","Group/Index","Component group index if multiple are equipped","num",true]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Set Component Reg.png",
    "desc":"Writes a value into a component register"
  },
  "set_reg":{
    "name":"Copy",
    "args":[["in","Value",null,"any"],["out","Target"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Set Register.png",
    "desc":"Copy a value to a frame register, parameter or variable"
  },
  "is_a":{
    "name":"Is a",
    "args":[["exec","If Different","Where to continue if the entities differ"],["in","Item"],["in","Type"]],
    "category":"Flow",
    "exec_arg":[1,"If Equal","Where to continue if the entities are the same"],
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Compares if an item of entity is of a specific type"
  },
  "get_grid_effeciency":{
    "name":"Get Grid Efficiency",
    "args":[["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Common/56x56/Power.png",
    "desc":"Gets the value of the Grid Efficiency as a percent"
  },
  "get_resource_num":{
    "name":"Get Resource Num",
    "args":[["in","Resource","Resource Node to check","entity"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Notify.png",
    "desc":"Gets the amount of resource"
  },
  "switch":{
    "name":"Switch",
    "args":[["in","Unit","Unit to Filter, defaults to Self","entity"],["in","Case 1","Case 1","radar"],["exec","1","Case 1"],["in","Case 2","Case 2","radar",true],["exec","2","Case 2",null,true],["in","Case 3","Case 3","radar",true],["exec","3","Case 3",null,true],["in","Case 4","Case 4","radar",true],["exec","4","Case 4",null,true],["in","Case 5","Case 5","radar",true],["exec","5","Case 5",null,true]],
    "category":"Unit",
    "exec_arg":[1,"Default","Did not match filter"],
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Filters the passed entity"
  },
  "nop":{
    "desc":"Instruction has been removed, behavior needs to be updated",
    "icon":"Main/skin/Icons/Special/Commands/Set Register.png",
    "name":"Invalid Instruction",
    "args":[]
  },
  "jump":{
    "name":"Jump",
    "args":[["in","Label","Label identifier","any"]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Common/56x56/J Value.png",
    "desc":"Jumps execution to label with the same label id"
  },
  "solve":{
    "name":"Solve Explorable",
    "args":[["in","Target","Explorable to solve","entity"],["out","Missing","Missing repair item, scanner component or Unpowered"],["exec","Failed","Missing item, component or power to scan"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Drop Items.png",
    "desc":"Attempt to solve explorable with inventory items"
  },
  "package_all":{
    "name":"Package All",
    "args":[["in","Unit","The destination to try and pack (if not self)","entity",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Pick Up Items.png",
    "desc":"Tries to pack all packable units into items"
  },
  "get_type":{
    "name":"Get Type",
    "args":[["in","Item/Entity"],["out","Type"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Common/56x56/Processing.png",
    "desc":"Gets the type from an item or entity"
  },
  "scan":{
    "name":"Radar",
    "args":[["in","Filter 1","First filter","radar"],["in","Filter 2","Second filter","radar"],["in","Filter 3","Third filter","radar"],["out","Result"],["exec","No Result","Execution path if no results are found"]],
    "category":"Component",
    "icon":"Main/skin/Icons/Special/Commands/Scan.png",
    "desc":"Scan for the closest unit that matches the filters"
  },
  "get_comp_reg":{
    "name":"Get from Component",
    "args":[["in","Component/Index","Component and register number to set","comp_num"],["out","Value"],["in","Group/Index","Component group index if multiple are equipped","num",true]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Set Component Reg.png",
    "desc":"Reads a value from a component register"
  },
  "unpackage_all":{
    "name":"Unpackage All",
    "args":[["in","Unit","The destination to try and unpack (if not self)","entity",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Drop Items.png",
    "desc":"Tries to unpack all packaged items"
  },
  "serve_construction":{
    "name":"Serve Construction",
    "args":[["exec","If Working","Where to continue if the unit started working"]],
    "key":"autobase",
    "category":"AutoBase",
    "icon":"icon_input",
    "desc":"Produce materials needed in construction sites"
  },
  "for_recipe_ingredients":{
    "name":"Loop Recipe Ingredients",
    "category":"Flow",
    "args":[["in","Recipe",null,"item"],["out","Ingredient","Recipe Ingredient"],["exec","Done","Finished loop"]],
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Loops through Ingredients"
  },
  "get_distance":{
    "name":"Distance",
    "args":[["in","Target","Target unit","entity"],["out","Distance","Unit and its distance in the numerical part of the value"],["in","Unit","The unit to measure from (if not self)","entity",true]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Closest Enemy.png",
    "desc":"Returns distance to a unit"
  },
  "is_moving":{
    "name":"Is Moving",
    "args":[["exec","Not Moving","Where to continue if entity is not moving"],["exec","Path Blocked","Where to continue if entity is path blocked"],["exec","No Result","Where to continue if entity is out of visual range"],["in","Unit","The unit to check (if not self)","entity",true]],
    "category":"Unit",
    "exec_arg":[1,"Moving","Where to continue if entity is moving"],
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Checks the movement state of an entity"
  },
  "is_same_grid":{
    "name":"Is Same Grid",
    "args":[["in","Entity","First Entity","entity"],["in","Entity","Second Entity","entity"],["exec","Different","Different power grids"]],
    "category":"Unit",
    "exec_arg":[1,"Same Grid","Where to continue if both entities are in the same power grid"],
    "icon":"Main/skin/Icons/Common/56x56/Power.png",
    "desc":"Checks if two entities are in the same power grid"
  },
  "add":{
    "name":"Add",
    "args":[["in","To",null,"coord_num"],["in","Num",null,"coord_num"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Add Numbers.png",
    "desc":"Adds a number or coordinate to another number or coordinate"
  },
  "make_producer":{
    "name":"Make Producer",
    "args":[["in","Item/Count","Item type and number of producers to maintain","item_num"],["in","Component","Production component","comp"],["in","Building","Building type to use as producer","frame"],["in","Location","Location offset from self","coord"],["exec","If Working","Where to continue if the unit started working"]],
    "key":"autobase",
    "category":"AutoBase",
    "icon":"icon_input",
    "desc":"Build and maintain dedicated production buildings"
  },
  "for_inventory_item":{
    "name":"Loop Inventory Slots",
    "category":"Flow",
    "args":[["out","Inventory","Item Inventory"],["exec","Done","Finished loop"],["out","Reserved Stack","Items reserved for outgoing order or recipe","num",true],["out","Unreserved Stack","Items available","num",true],["out","Reserved Space","Space reserved for an incoming order","num",true],["out","Unreserved Space","Remaining space","num",true]],
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Loops through Inventory"
  },
  "is_equipped":{
    "name":"Is Equipped",
    "args":[["in","Component","Component to check","comp"],["exec","Component Equipped","Where to continue if component is equipped"],["out","Result","Returns how many instances of a component equipped on this Unit",null,true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Free Space.png",
    "desc":"Check if a specific component has been equipped"
  },
  "get_stability":{
    "name":"Get Stability",
    "args":[["out","Number","Stability"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Gets the current world stability"
  },
  "get_inventory_item_index":{
    "name":"Get Inventory Item",
    "args":[["in","Index","Slot index","num"],["out","Item"],["exec","No Item","Item not found"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Reads the item contained in the specified slot index"
  },
  "produce":{
    "desc":"Sets a production component to produce a blueprint",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "name":"Produce Unit",
    "category":"Global"
  },
  "mine":{
    "name":"Mine",
    "args":[["in","Resource","Resource to Mine","resource_num"],["exec","Cannot Mine","Execution path if mining was unable to be performed"],["exec","Full","Execution path if can't fit resource into inventory"]],
    "category":"Component",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Mines a single resource"
  },
  "get_max_stack":{
    "name":"Get Max Stack",
    "args":[["in","Item","Item to count","item_num"],["out","Max Stack","Max Stack"]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Count Item.png",
    "desc":"Returns the amount an item can stack to"
  },
  "call":{
    "icon":"icon_input",
    "category":"Flow"
  },
  "dodrop":{
    "name":"Drop Off Items",
    "args":[["in","Destination","Unit or destination to bring items to","entity"],["in","Item / Amount","Item and amount to drop off","item_num",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Drop Items.png",
    "desc":"Drop off items at a unit or destination\n\nIf a number is set it will drop off an amount to fill the target unit up to that amount\nIf unset it will try to drop off everything."
  },
  "land":{
    "desc":"Tells a satellite that has been launched to land",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "name":"Land",
    "category":"Global"
  },
  "lock":{
    "desc":"Run one instruction at a time",
    "icon":"Main/skin/Icons/Common/56x56/Unlocked.png",
    "name":"Lock",
    "category":"Flow"
  },
  "compare_entity":{
    "name":"Compare Entity",
    "args":[["exec","If Different","Where to continue if the entities differ"],["in","Entity 1"],["in","Entity 2"]],
    "category":"Flow",
    "exec_arg":[1,"If Equal","Where to continue if the entities are the same"],
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Compares Entities"
  },
  "div":{
    "name":"Divide",
    "args":[["in","From",null,"coord_num"],["in","Num",null,"coord_num"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Divide Numbers.png",
    "desc":"Divides a number or coordinate from another number or coordinate"
  },
  "check_altitude":{
    "name":"Check Altitude",
    "args":[["in","Unit","The unit to check for (if not self)","entity",true],["exec","Valley","Where to continue if the unit is in a valley"],["exec","Plateau","Where to continue if the unit is on a plateau"]],
    "category":"Unit",
    "exec_arg":[4,"No Unit","No visible unit passed",null,true],
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Divert program depending on location of a unit"
  },
  "set_number":{
    "name":"Set Number",
    "args":[["in","Value"],["in","Num/Coord",null,"coord_num"],["out","To"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Sets the numerical/coordinate part of a value"
  },
  "combine_register":{
    "name":"Combine Register",
    "args":[["in","Num"],["in","Entity"],["out","Register",null,"entity"],["in","x",null,null,true],["in","y",null,null,true]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Combine to make a register from separate parameters"
  },
  "shutdown":{
    "desc":"Shuts down the power of the Unit",
    "icon":"Main/skin/Icons/Common/56x56/Power.png",
    "name":"Turn Off",
    "category":"Unit"
  },
  "read_signal":{
    "name":"Read Signal",
    "args":[["in","Unit","The owned unit to check for","entity"],["out","Result","Value of units Signal register"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Scan.png",
    "desc":"Reads the Signal register of another unit"
  },
  "scout":{
    "desc":"Moves in a scouting pattern around the factions home location",
    "icon":"Main/skin/Icons/Special/Commands/Scout.png",
    "name":"Scout",
    "category":"Move"
  },
  "unlock_slots":{
    "name":"Unfix Item Slots",
    "args":[["in","Slot index","Individual slot to unfix","num",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Free Space.png",
    "desc":"Unfix all inventory slots or a specific item slot index"
  },
  "domove_range":{
    "name":"*Move Unit (Range)*",
    "args":[["in","Target","Unit to move to, the number specifies the range in which to be in","entity"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"*DEPRECATED* Use Move Unit"
  },
  "check_blightness":{
    "name":"Check Blightness",
    "args":[["in","Unit","The unit to check for (if not self)","entity",true],["exec","Blight","Where to continue if the unit is in the blight"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Divert program depending on location of a unit"
  },
  "get_ingredients":{
    "name":"Get Ingredients",
    "args":[["in","Product",null,"item"],["out","Out 1","First Ingredient"],["out","Out 2","Second Ingredient"],["out","Out 3","Third Ingredient"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Ingradients.png",
    "desc":"Returns the ingredients required to produce an item"
  },
  "turnon":{
    "desc":"Turns on the power of the Unit",
    "icon":"Main/skin/Icons/Common/56x56/Power.png",
    "name":"Turn On",
    "category":"Unit"
  },
  "order_to_shared_storage":{
    "desc":"Request Inventory to be sent to nearest shared storage with corresponding locked slots",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "name":"Order to Shared Storage",
    "category":"Unit"
  },
  "stop":{
    "desc":"Stop movement and abort what is currently controlling the entities movement",
    "icon":"Main/skin/Icons/Special/Commands/Notify.png",
    "name":"Stop Unit",
    "category":"Move"
  },
  "unit_type":{
    "name":"Unit Type",
    "args":[["in","Unit","The unit to check","entity"],["exec","Building","Where to continue if the entity is a building"],["exec","Bot","Where to continue if the entity is a bot"],["exec","Construction","Where to continue if the entity is a construction site",null,true]],
    "category":"Flow",
    "exec_arg":[5,"No Unit","No visible unit passed",null,true],
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Divert program depending on unit type"
  },
  "connect":{
    "desc":"Connects Units from Logistics Network",
    "icon":"Main/skin/Icons/Common/56x56/Carry.png",
    "name":"Connect",
    "category":"Unit"
  },
  "for_entities_in_range":{
    "name":"Loop Entities (Range)",
    "category":"Flow",
    "args":[["in","Range","Range (up to units visibility range)","number"],["in","Filter","Filter to check","radar"],["in","Filter","Second Filter","radar",true],["in","Filter","Third Filter","radar",true],["out","Entity","Current Entity"],["exec","Done","Finished looping through all entities in range"]],
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Performs code for all entities in visibility range of the unit"
  },
  "check_battery":{
    "name":"Check Battery",
    "args":[["exec","Full","Where to continue if battery power is fully recharged"],["in","Unit","The unit to check for (if not self)","entity",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Check Battery.png",
    "desc":"Checks the Battery level of a unit"
  },
  "set_signpost":{
    "desc":"Set the signpost to specific text",
    "icon":"Main/skin/Icons/Special/Commands/Notify.png",
    "name":"Set Signpost",
    "category":"Component"
  },
  "enable_transport_route":{
    "desc":"Enable Unit to deliver on transport route",
    "icon":"Main/skin/Icons/Common/56x56/Carry.png",
    "name":"Enable Transport Route",
    "category":"Unit"
  },
  "getfreespace":{
    "name":"Get space for item",
    "args":[["in","Item","Item to check can fit","item"],["out","Result","Number of a specific item that can fit on a unit"],["in","Unit","The unit to check (if not self)","entity",true]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Count Free Space.png",
    "desc":"Returns how many of the input item can fit in the inventory"
  },
  "make_turret_bots":{
    "name":"Make Turret Bots",
    "args":[["in","Number","Number of turret bots to maintain","num"],["exec","If Working","Where to continue if the unit started working"]],
    "key":"autobase",
    "category":"AutoBase",
    "icon":"icon_input",
    "desc":"Construct and equip turret components on available carrier bots"
  },
  "label":{
    "name":"Label",
    "args":[["in","Label","Label identifier","any"]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Set Register.png",
    "desc":"Labels can be jumped to from anywhere in a behavior"
  },
  "disable_transport_route":{
    "desc":"Disable Unit to deliver on transport route",
    "icon":"Main/skin/Icons/Common/56x56/Carry.png",
    "name":"Disable Transport Route",
    "category":"Unit"
  },
  "sort_storage":{
    "desc":"Sorts Storage Containers on Unit",
    "icon":"Main/skin/Icons/Common/32x32/Sort.png",
    "name":"Sort Storage",
    "category":"Unit"
  },
  "gather_information":{
    "name":"Gather Information",
    "args":[["in","Range","Range of operation","num"]],
    "key":"autobase",
    "category":"AutoBase",
    "icon":"icon_input",
    "desc":"Collect information for running the auto base controller"
  },
  "get_location":{
    "name":"Get Location",
    "args":[["in","Entity","Entity to get coordinates of","entity"],["out","Coord","Coordinate of entity"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Gets location of a a seen entity"
  },
  "separate_coordinate":{
    "name":"Separate Coordinate",
    "args":[["in","Coordinate",null,"coord_num"],["out","x"],["out","y"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Split a coordinate into x and y values"
  },
  "equip_component":{
    "name":"Equip Component",
    "args":[["exec","No Component","If you don't current hold the requested component"],["in","Component","Component to equip","comp"],["in","Slot index","Individual slot to equip component from","num",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Common/56x56/Home.png",
    "desc":"Equips a component if it exists"
  },
  "get_health":{
    "name":"Get Health",
    "args":[["in","Entity","Entity to check","entity"],["out","Percent","Percentage of health remaining"],["out","Current","Value of health remaining",null,true],["out","Max","Value of maximum health",null,true]],
    "category":"Math",
    "icon":"Main/skin/Icons/Common/56x56/H Value.png",
    "desc":"Gets a units health as a percentage, current and max"
  },
  "domove_async":{
    "name":"Move Unit (Async)",
    "args":[["in","Target","Unit to move to","entity"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Move to another unit while continuing the program"
  },
  "remap_value":{
    "name":"Remap",
    "args":[["in","Value","Value to Remap"],["in","Input Low","Low value for input"],["in","Input High","High value for input"],["in","Target Low","Low value for target"],["in","Target high","High value for target"],["out","Result","Remapped value"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Remaps a value between two ranges"
  },
  "get_resource_item":{
    "name":"Resource Type",
    "args":[["in","Resource Node","Resource Node","entity"],["out","Resource","Resource Type"],["exec","Not Resource","Continue here if it wasn't a resource node"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Notify.png",
    "desc":"Gets the resource type from an resource node"
  },
  "read_radio":{
    "name":"Read Radio",
    "args":[["in","Band","The band to check for"],["out","Result","Value of the radio signal"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Scan.png",
    "desc":"Reads the Radio signal on a specified band"
  },
  "build":{
    "name":"Place Construction",
    "args":[["in","Coordinate","Target location, or at currently location if not specified","coord_num",true],["in","Rotation","Building Rotation (0 to 3) (default 0)","num",true],["exec","Construction Failed","Where to continue if construction failed"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Places a construction site for a specific structure"
  },
  "sub":{
    "name":"Subtract",
    "args":[["in","From",null,"coord_num"],["in","Num",null,"coord_num"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Substact Numbers.png",
    "desc":"Subtracts a number or coordinate from another number or coordinate"
  },
  "lock_slots":{
    "name":"Fix Item Slots",
    "args":[["in","Item","Item type to try fixing to the slots","item_num"],["in","Slot index","Individual slot to fix","num",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Count Free Space.png",
    "desc":"Fix all storage slots or a specific item slot index"
  },
  "launch":{
    "desc":"Launches a satellite if equipped on an AMAC",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "name":"Launch",
    "category":"Global"
  },
  "ping":{
    "name":"Pings a Unit",
    "args":[["in","Target","Target unit","entity"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Notify.png",
    "desc":"Plays the Ping effect and notifies other players"
  },
  "order_transfer":{
    "name":"Order Transfer To",
    "args":[["in","Target","Target unit","entity"],["in","Item","Item and amount to transfer","item_num"]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Special/Commands/Make Order.png",
    "desc":"Transfers an Item to another Unit"
  },
  "select_nearest":{
    "name":"Select Nearest",
    "args":[["exec","A","A is nearer (or equal)"],["exec","B","B is nearer"],["in","Unit A",null,"entity"],["in","Unit B",null,"entity"],["out","Closest","Closest unit",null,true]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Closest Enemy.png",
    "desc":"Branches based on which unit is closer, optional branches for closer unit"
  },
  "percent_value":{
    "name":"Percent",
    "args":[["in","Value","Value to check"],["in","Max Value","Max Value to get percentage of"],["out","Number","Percent"]],
    "category":"Global",
    "icon":"Main/skin/Icons/Special/Commands/Compare Values.png",
    "desc":"Gives you the percent that value is of Max Value"
  },
  "value_type":{
    "name":"Data type switch",
    "args":[["in","Data","Data to test"],["exec","Item","Item Type"],["exec","Entity","Entity Type"],["exec","Component","Component Type"],["exec","Tech","Tech Type",null,true],["exec","Value","Information Value Type",null,true],["exec","Coord","Coordinate Value Type",null,true]],
    "category":"Flow",
    "exec_arg":[1,"No Match","Where to continue if there is no match"],
    "icon":"Main/skin/Icons/Common/56x56/Processing.png",
    "desc":"Switch based on type of value"
  },
  "check_grid_effeciency":{
    "name":"Check Grid Efficiency",
    "args":[["exec","Full","Where to continue if at full efficiency"],["in","Unit","The unit to check for (if not self)","entity",true]],
    "category":"Unit",
    "icon":"Main/skin/Icons/Common/56x56/Power.png",
    "desc":"Checks the Efficiency of the power grid the unit is on"
  },
  "moveaway_range":{
    "name":"Move Away (Range)",
    "args":[["in","Target","Unit to move away from","entity"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Moves out of range of another unit"
  },
  "disconnect":{
    "desc":"Disconnects Units from Logistics Network",
    "icon":"Main/skin/Icons/Common/56x56/Carry.png",
    "name":"Disconnect",
    "category":"Unit"
  },
  "make_carrier":{
    "name":"Make Carriers",
    "args":[["in","Carriers","Type and count of carriers to make","frame_num"],["exec","If Working","Where to continue if the unit started working"]],
    "key":"autobase",
    "category":"AutoBase",
    "icon":"icon_input",
    "desc":"Construct carrier bots for delivering orders or to use for other tasks"
  },
  "wait":{
    "name":"Wait Ticks",
    "args":[["in","Time","Number of ticks to wait","num"]],
    "category":"Flow",
    "icon":"Main/skin/Icons/Special/Commands/Wait.png",
    "desc":"Pauses execution of the behavior until 1 or more ticks later"
  },
  "mul":{
    "name":"Multiply",
    "args":[["in","To",null,"coord_num"],["in","Num",null,"coord_num"],["out","Result"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Mul Numbers.png",
    "desc":"Multiplies a number or coordinate from another number or coordinate"
  },
  "checkfreespace":{
    "name":"Check space for item",
    "args":[["exec","Can't Fit","Execution if it can't fit the item"],["in","Item","Item and amount to check can fit","item_num"]],
    "category":"Math",
    "icon":"Main/skin/Icons/Special/Commands/Count Free Space.png",
    "desc":"Checks if free space is available for an item and amount"
  },
  "move_south":{
    "name":"Move South",
    "args":[["in","Number","Number of tiles to move South","num"]],
    "category":"Move",
    "icon":"Main/skin/Icons/Special/Commands/Move To.png",
    "desc":"Moves towards a tile South of the current location at the specified distance"
  }
}